df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = c("NA", "N/A"),
replacement = "KEKW"
)
)
)
df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = c("NA", "na"),
replacement = "KEKW"
)
)
)
things_to_replace <- c("NA", "N/A", "na")
df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = things_to_replace,
replacement = "KEKW"
)
)
)
things_to_replace <- c("NA", "N/A", "na", "n/a", "unknown")
df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = things_to_replace,
replacement = "KEKW"
)
)
)
things_to_replace <- c("NA"|"N/A"|"na"|"n/a"|"unknown")
things_to_replace <- c("NA|N/A|na|n/a|unknown")
df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = things_to_replace,
replacement = "KEKW"
)
)
)
things_to_replace <- c("NA | N/A|na|n/a|unknown")
df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = things_to_replace,
replacement = "KEKW"
)
)
)
things_to_replace <- c("NA|N/A|na|n/a|unknown")
df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = things_to_replace,
replacement = "KEKW"
)
)
)
#Import the data file and do initial cleaining
df <- read_excel("Lessons/2022/2022_04_07_Intro_to_Tidyverse_and_importing_cleaning_tables/iris_real_world.xlsx") %>%
clean_names() %>%
remove_empty() %>%
remove_constant() %>%
distinct()
library(tidyverse)
#Import the data file and do initial cleaining
df <- read_excel("Lessons/2022/2022_04_07_Intro_to_Tidyverse_and_importing_cleaning_tables/iris_real_world.xlsx") %>%
clean_names() %>%
remove_empty() %>%
remove_constant() %>%
distinct()
library(janitor)
#Import the data file and do initial cleaining
df <- read_excel("Lessons/2022/2022_04_07_Intro_to_Tidyverse_and_importing_cleaning_tables/iris_real_world.xlsx") %>%
clean_names() %>%
remove_empty() %>%
remove_constant() %>%
distinct()
library(readxl)
#Import the data file and do initial cleaining
df <- read_excel("Lessons/2022/2022_04_07_Intro_to_Tidyverse_and_importing_cleaning_tables/iris_real_world.xlsx") %>%
clean_names() %>%
remove_empty() %>%
remove_constant() %>%
distinct()
df %>% str_replace_all(., setosa, versicolor)
df %>% str_replace_all(., "setosa", "versicolor")
ho <- df %>% str_replace_all(., "setosa", "versicolor")
pets <- c(“cat”, “cat”, “dog”)
pets <- c(“cat”, “cat”, “dog”)
pets <- c("cat", "cat", "dog")
str_replace_all(pets, "cat", "dog")
patterns <- c("cat|dog")
str_replace_all(pets, patterns, "possum")
df %>% across(.cols = starts_with("sepal"), .fns = summarise())
df %>% across(.cols = starts_with("sepal"), .fns = mean())
df %>% across(.cols = starts_with("sepal"), .fns = mean(.))
df %>% across(.cols = starts_with("sepal"), .fns = n_distinct())
df %>% summarise(across(.cols = starts_with("sepal"), .fns = n()))
df %>% summarise(across(.cols = starts_with("sepal"), .fns = n_distinct())
)
df %>% summarise(across(.cols = starts_with("sepal"), .fns = n_distinct()))
df %>% summarise(across(starts_with("sepal"), n_distinct()))
df %>% summarise(across(starts_with("sepal"), n_distinct))
df %>% summarise(across(starts_with("sepal"), n))
df %>% summarise(across(starts_with("sepal"), n()))
df %>% summarise(across(starts_with("sepal"), n))
df %>% summarise(across(starts_with("sepal"), n))
df %>% summarise(across(starts_with("sepal"), n))
df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = things_to_replace,
replacement = NA_character_
)
)
)
things_to_replace <- c("NA|N/A|na|n/a|unknown")
df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = things_to_replace,
replacement = NA_character_
)
)
)
ndf <- df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = things_to_replace,
replacement = NA_character_
)
)
)
View(ndf)
#What kinds of troublesome NAs do we have in our data?
df %>%
summarise()
#What kinds of troublesome NAs do we have in our data?
df %>%
summarise(n = n())
#What kinds of troublesome NAs do we have in our data?
df %>%
summarise(n = n_distinct())
df
#What kinds of troublesome NAs do we have in our data?
df %>%
summarise(across(everything(), n = n))
#What kinds of troublesome NAs do we have in our data?
df %>%
summarise(across(everything(), n = n))
#What kinds of troublesome NAs do we have in our data?
df %>%
summarise(across(everything(), n_distinct()))
#What kinds of troublesome NAs do we have in our data?
df %>%
summarise(across(everything(), n_distinct))
#What kinds of troublesome NAs do we have in our data?
df %>%
summarise(across(everything(), n))
#What kinds of troublesome NAs do we have in our data?
df %>%
summarise(across(everything(), unique))
#What kinds of troublesome NAs do we have in our data?
df %>%
summarise(across(everything(), unique()))
#What kinds of troublesome NAs do we have in our data?
df %>%
summarise(across(everything(), group_by(.)))
#What kinds of troublesome NAs do we have in our data?
df %>%
summarise(across(everything(), n_distinct))
df %>%
summarise(n = n(sepal_width))
df %>%
summarise(n = n_distinct(sepal_width))
#What kinds of troublesome NAs do we have in our data?
df %>%
group_by(across(everything(), summarise(n = n())))
#What kinds of troublesome NAs do we have in our data?
df %>%
group_by(across(everything()))
#What kinds of troublesome NAs do we have in our data?
df %>%
group_by(across(everything())) %>%
summarise(n = n())
#What kinds of troublesome NAs do we have in our data?
df %>%
group_by(across(everything())) %>%
summarise(n = n(.groups))
#What kinds of troublesome NAs do we have in our data?
df %>%
group_by(across(everything())) %>%
summarise(n = n(.))
#What kinds of troublesome NAs do we have in our data?
df %>%
group_by(across(everything())) %>%
summarise(n = n())
#What kinds of troublesome NAs do we have in our data?
df %>%
group_by(across(everything())) %>%
summarise(n = distinct())
df %>%
summarise(n = distinct(sepal_width))
#What kinds of troublesome NAs do we have in our data?
df %>%
distinct()
#What kinds of troublesome NAs do we have in our data?
df %>%
unique()
#What kinds of troublesome NAs do we have in our data?
df %>%
group_by(sepal_width) %>%
summarise(n = n())
#Create a vector containing the patterns of the troublesome NAs
troublesome_nas <- c("NA|N/A|na|n/a|unknown")
#Use mutate, across, and str_replace_all to fix these values
df_NAs_fixed <- df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = troublesome_nas,
replacement = NA_character_
)
)
)
View(df_NAs_fixed)
df_NAs_fixed
#We now have to fix the variable types in our tibble -- as they are all <chr> now.
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
as.double()
)
)
#We now have to fix the variable types in our tibble -- as they are all <chr> now.
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
as.double
)
)
#We now have to fix the variable types in our tibble -- as they are all <chr> now.
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
.fns = as.double
)
)
#We now have to fix the variable types in our tibble -- as they are all <chr> now.
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
.fns = ~ as.double
)
)
#We now have to fix the variable types in our tibble -- as they are all <chr> now.
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
.fns = as.double
)
)
df
#We now have to fix the variable types in our tibble -- as they are all <chr> now.
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
.fns = as.double
)
across(
.cols = 6,
.fns = as.Date
)
)
#We now have to fix the variable types in our tibble -- as they are all <chr> now.
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
.fns = as.double
)
)
#We now have to fix the variable types in our tibble -- as they are all <chr> now.
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
.fns = as.double
),
date_collected = as.Date()
)
#We now have to fix the variable types in our tibble -- as they are all <chr> now.
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
.fns = as.double
),
date_collected = as.double()
)
#We now have to fix the variable types in our tibble -- as they are all <chr> now.
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
.fns = as.double
),
date_collected = as.double(date_collected)
)
#We now have to fix the variable types in our tibble -- as they are all <chr> now.
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
.fns = as.double
),
date_collected = as.Date(date_collected)
)
#We now have to fix the variable types in our tibble -- as they are all <chr> now.
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
.fns = as.double
),
date_collected = as.Date.POSIXct(date_collected)
)
#We now have to fix the variable types in our tibble -- as they are all <chr> now.
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
.fns = as.double
),
date_collected = as.Date.POSIXct(date_collected)
)
#We now have to fix the variable types in our tibble -- as they are all <chr> now.
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
.fns = as.double
),
date_collected = as.Date(date_collected)
)
#Use mutate, across, and str_replace_all to fix these values
df_NAs_fixed <- df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = troublesome_nas,
replacement = NA_character_
)
)
)
df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = troublesome_nas,
replacement = NA_character_
)
)
)
df %>%
mutate(
across(
.cols = everything(),
.fns = str_replace_all(
string = .,
pattern = troublesome_nas,
replacement = NA_character_
)
)
)
df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = troublesome_nas,
replacement = NA_character_
)
)
)
df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = troublesome_nas,
replacement = NA_character_
)
)
)
df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
.fns = ~ as.double
),
date_collected = as.Date(date_collected)
)
df %>%
mutate(
across(
.cols = everything(),
.fns = n_distinct
)
)
df_NAs_fixed <- df %>%
mutate(
across(
.cols = everything(),
.fns = ~ str_replace_all(
string = .,
pattern = troublesome_nas,
replacement = NA_character_
)
)
)
df_NAs_fixed <- df_NAs_fixed %>%
mutate(
across(
.cols = c(1:5),
.fns = as.double
),
date_collected = as.Date(date_collected)
)
df_NAs_fixed
df <- read_excel("Lessons/2022/2022_04_07_Intro_to_Tidyverse_and_importing_cleaning_tables/iris_real_world.xlsx") %>%
clean_names() %>%
remove_empty() %>%
remove_constant() %>%
distinct()
df
#1: Calculate the mean of the 'sepal_length' values
df$sepal_length %>% mean()
#1: Calculate the mean of the 'sepal_length' values
df %>% group_by(sepal_length) %>% summarise(mean = mean())
#1: Calculate the mean of the 'sepal_length' values
df %>% group_by(sepal_length) %>% summarise(mean = mean(.))
#1.2: Create a character vector of the offending variable names
s <- c("Setosa|setosas")
#1.3: Use mutate and str_detect_all to rename the offending variables
df %>% mutate(species = str_replace_all(., s, "setosa"))
#1.3: Use mutate and str_detect_all to rename the offending variables
df %>% mutate(species = str_replace_all(., s, "setosa"))
#1.3: Use mutate and str_detect_all to rename the offending variables
df %>% mutate(species = str_replace_all(., s, "setosa"))
#1.3: Use mutate and str_detect_all to rename the offending variables
df %>% mutate(species = ~ str_replace_all(., s, "setosa"))
#1.3: Use mutate and str_detect_all to rename the offending variables
df %>% mutate(species = str_replace_all(species, s, "setosa"))
#1.3: Use mutate and str_detect_all to rename the offending variables
dfz %>% mutate(species = str_replace_all(species, s, "setosa"))
#1.3: Use mutate and str_detect_all to rename the offending variables
dfz <- df %>% mutate(species = str_replace_all(species, s, "setosa"))
View(dfz)
#1.4: Check how many unique categories there are of 'species' again
df %>% group_by(species) %>% summarise(n = n())
#1.4: Check how many unique categories there are of 'species' again
dfz %>% group_by(species) %>% summarise(n = n())
